Resources:
  MyApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId:
        Fn::GetAtt:
        - MyRestApi
        - RootResourceId
      RestApiId:
        Ref: MyRestApi
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub:
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn:
              Fn::GetAtt:
              - MyLambdaFunction
              - Arn
  MyRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyRestApiName
      EndpointConfiguration:
        Types:
        - REGIONAL
  MyApiGwDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - MyApiMethod
    Properties:
      RestApiId:
        Ref: MyRestApi
      StageName: stagename
  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/LambdaFuncName:*
        PolicyName: lambda2cw
      - PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - dynamodb:*
            Effect: Allow
            Resource:
            - Fn::GetAtt:
              - MyDynamoTable
              - Arn
        PolicyName: lambda2dynamo
  MyLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - MyLambdaFunction
    - MyRestApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - MyLambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyRestApi}/stagename/POST/
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role:
        Fn::GetAtt:
        - MyLambdaRole
        - Arn
      MemorySize: 128
      Runtime: python3.8
      Handler: notindex.handler
      FunctionName: LambdaFuncName
      Code:
        S3Bucket: lab-9-1-3-jdix
        S3Key: f5efaec261b53725468f36c2f1b04427
  MyDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MyDynamoTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: AttName
        AttributeType: S
      KeySchema:
      - AttributeName: AttName
        KeyType: HASH
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${MyLambdaFunction}
      RetentionInDays: 90
Outputs:
  apiGatewayInvokeURL:
    Value:
      Fn::Sub: https://${MyRestApi}.execute-api.${AWS::Region}.amazonaws.com/stagename
  lambdaArn:
    Value:
      Fn::GetAtt:
      - MyLambdaFunction
      - Arn

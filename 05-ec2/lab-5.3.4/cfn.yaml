Parameters:
  subnetCidrParam:
    Description: string of subnet cidr block to use
    Type: String
  vpcCidrParam:
    Description: string of vpc cidr block to use
    Type: String
Resources:
  Igw:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
    Type: AWS::EC2::InternetGateway
  IgwA:
    Properties:
      InternetGatewayId: !Ref 'Igw'
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::VPCGatewayAttachment
  RouteTable:
    Properties:
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::RouteTable
  RouteTblSubnetAsoc:
    Properties:
      RouteTableId: !Ref 'RouteTable'
      SubnetId: !Ref 'Subnet'
    Type: AWS::EC2::SubnetRouteTableAssociation
  Subnet:
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Ref 'subnetCidrParam'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::Subnet
  Vpc:
    Properties:
      CidrBlock: !Ref 'vpcCidrParam'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
    Type: AWS::EC2::VPC
  defaultRoute:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref Igw
      RouteTableId: !Ref RouteTable
    Type: AWS::EC2::Route
  MySg:
    Properties:
      GroupDescription: who cares
      VpcId: !Ref Vpc
    Type: AWS::EC2::SecurityGroup
  MySshIn:
    Properties:
      CidrIp: '0.0.0.0/0'
      FromPort: 22
      GroupId: !Ref MySg
      IpProtocol: tcp
      ToPort: 22
    Type: AWS::EC2::SecurityGroupIngress
  MyRdpIn:
    Properties:
      CidrIp: '0.0.0.0/0'
      FromPort: 3389
      GroupId: !Ref MySg
      IpProtocol: tcp
      ToPort: 3389
    Type: AWS::EC2::SecurityGroupIngress
  MyPingIn:
    Properties:
      CidrIp: '0.0.0.0/0'
      FromPort: -1
      GroupId: !Ref MySg
      IpProtocol: icmp
      ToPort: -1
    Type: AWS::EC2::SecurityGroupIngress
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunceTemplate
      LaunchTemplateData:
        KeyName: josh.dix.labs.mac.keypair.useast2
        SecurityGroupIds:
          - !Ref MySg
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: tagkeyexample
                Value: tagvalueexample
  MyLinuxInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cloudwatchInitialization: 
            - cwFiles
            - cwCommands
            - makeFsCommands
        cwFiles:
          files:
            /opt/aws/amazon-cloudwatch-agent/bin/config.json:
              content: |
                #!/bin/bash
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "run_as_user": "root"
                  },
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${aws:AutoScalingGroupName}",
                      "ImageId": "${aws:ImageId}",
                      "InstanceId": "${aws:InstanceId}",
                      "InstanceType": "${aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "disk": {
                        "measurement": [
                          "used_percent"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                          "*"
                        ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 60
                      }
                    }
                  }
                }
        cwCommands:
          aaaCommand:
            command: 'sudo apt-get update -y'
          aabCommand:
            command: 'curl https://s3.amazonaws.com/amazoncloudwatch-agent/debian/amd64/latest/amazon-cloudwatch-agent.deb -O'
          aacCommand:
            command: 'sudo dpkg -i -E ./amazon-cloudwatch-agent.deb'
          aadCommand:
            command: 'sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json'
        makeFsCommands:
          aaaCommand:
            command: 'sudo mkfs -t xfs /dev/xvdf'
          aabCommand:
            command: 'sudo mkdir /data'
          aacCommand:
            command: 'sudo mount /dev/xvdf /data'
          aadCommand:
            command: 'sudo chmod 777 /data && echo somedata >> /data/new-file.txt'
          # below only works with 1 volume
          aafCommand:
            command: "blkid | grep -Eo '[a-z,0-9]*-[a-z,0-9]*-[a-z,0-9]*-[a-z,0-9]*-[a-z,0-9]*' | tail -n 1 >> id.txt"
          aagCommand:
            command: 'varname=`cat id.txt`; echo "UUID=$varname  /data  xfs  defaults,nofail  0  2" | sudo tee -a /etc/fstab'
    Properties:
      ImageId: "ami-037c234ac9f2dab36"
      SubnetId: !Ref Subnet
      InstanceType: "t2.small"
      IamInstanceProfile: !Ref MyInstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash -x
          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init -v  --stack !Ref 'AWS::StackName' --resource MyLinuxInstance --region !Ref 'AWS::Region'
          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal -e $? --stack !Ref 'AWS::StackName' --resource MyLinuxInstance --region !Ref 'AWS::Region'
      LaunchTemplate:
        Version: !GetAtt 'MyLaunchTemplate.LatestVersionNumber'
        LaunchTemplateId: !Ref MyLaunchTemplate
  MyInstanceEip:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyLinuxInstance


  MyEbsVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !GetAtt MyLinuxInstance.AvailabilityZone
      VolumeType: gp2
      Size: 3
  MyVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref MyLinuxInstance
      VolumeId: !Ref MyEbsVolume

  MyCloudWatchEnabledRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MyCloudWatchEnabledRole


# Outputs:
#   UbuntuEipOut:
#     Value: !Ref MyElasticIp
#     Export:
#       Name: UbuntuEip